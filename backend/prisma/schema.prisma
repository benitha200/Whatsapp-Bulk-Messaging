// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model EmailVerification {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}


model User {
  id                   Int            @id @default(autoincrement())
  name                 String
  email                String         @unique
  password             String
  role                 String         @default("user")
  active               Boolean        @default(true)
  photo                String?
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  verificationToken    String?
  verificationExpires  DateTime?
  isVerified           Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now()) @updatedAt

  // Relations
  emailVerifications EmailVerification[]
  apiKeys           APIKey[]
  auditLogs         AuditLog[]
  campaigns         Campaign[]
  contacts          Contact[]
  contactLists      ContactList[]
  messages          Message[]
  notifications     Notification[]
  payments          Payment[]
  settings          Setting[]
  subscription      Subscription?
  templates         Template[]
  tickets           Ticket[]         @relation("TicketOwner")
  assignedTickets   Ticket[]         @relation("TicketAssignee")
  ticketComments    TicketComment[]
}

model APIKey {
  id             Int       @id @default(autoincrement())
  name           String
  key            String    @unique
  active         Boolean   @default(true)
  permissions    Json      // Stores the permissions object
  ipRestrictions Json?
  lastUsed       DateTime?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  
  // Relations
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  action       String
  resourceType String
  resourceId   Json     // Flexible type using Json
  details      Json?    // Flexible type using Json
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
}

model Campaign {
  id             Int       @id @default(autoincrement())
  name           String
  status         String    @default("draft")
  schedule       Json?     // Store schedule as JSON
  audience       Json?     // Store audience as JSON
  messageVariables Json?   // Store variables as JSON
  attachments    Json?     // Store attachments as JSON
  analytics      Json?     // Store analytics as JSON
  notes          String?
  reviewNotes    String?
  rejectionReason String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  
  // Relations
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  template       Template  @relation(fields: [templateId], references: [id])
  templateId     Int
  messages       Message[]
}

model Contact {
  id                    Int       @id @default(autoincrement())
  phoneNumber           String    @unique
  countryCode           String    @default("+1")
  firstName             String?
  lastName              String?
  email                 String?
  company               String?
  title                 String?
  tags                  Json?
  customFields          Json?     // Store customFields as JSON
  optIn                 Boolean   @default(true)
  optInDate             DateTime?
  optOutDate            DateTime?
  lastMessageSentAt     DateTime?
  lastMessageReceivedAt DateTime?
  notes                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id])
  userId                Int
  messages              Message[]
  contactLists          ContactList[] @relation("ContactToContactList")
}

model ContactList {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  isDynamic      Boolean   @default(false)
  dynamicFilters Json?     // Store dynamicFilters as JSON
  tags           Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  
  // Relations
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  contacts       Contact[] @relation("ContactToContactList")
}

model Message {
  id               Int       @id @default(autoincrement())
  content          String
  originalContent  String?
  variables        Json?     // Store variables as JSON
  attachments      Json?     // Store attachments as JSON
  status           String    @default("queued")
  sentAt           DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  failedAt         DateTime?
  errorMessage     String?
  whatsappMessageId String?
  isManualSend     Boolean   @default(false)
  cost             Float     @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  contact          Contact   @relation(fields: [contactId], references: [id])
  contactId        Int
  campaign         Campaign? @relation(fields: [campaignId], references: [id])
  campaignId       Int?
  template         Template? @relation(fields: [templateId], references: [id])
  templateId       Int?
}

model Notification {
  id                Int      @id @default(autoincrement())
  title             String
  message           String
  type              String   @default("info")
  read              Boolean  @default(false)
  relatedResource   String   @default("other")
  relatedResourceId Json?    // Flexible type using Json
  link              String?
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
}

model Payment {
  id               Int       @id @default(autoincrement())
  amount           Float
  currency         String    @default("USD")
  paymentMethod    String    @default("credit_card")
  status           String    @default("pending")
  transactionId    String?
  paymentProcessor String    @default("stripe")
  paymentDetails   Json?     // Store paymentDetails as JSON
  description      String?
  billingAddress   Json?     // Store billingAddress as JSON
  receiptUrl       String?
  invoiceNumber    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId   Int?
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String
  value       Json     // Flexible type using Json
  isSystem    Boolean  @default(false)
  isGlobal    Boolean  @default(false)
  description String?
  group       String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?

  @@unique([userId, key])
}

model Subscription {
  id                   Int       @id @default(autoincrement())
  plan                 String    @default("free")
  status               String    @default("trial")
  startDate            DateTime  @default(now())
  endDate              DateTime
  trialEndsAt          DateTime?
  monthlyMessageLimit  Int       @default(1000)
  messagesSent         Int       @default(0)
  paymentMethod        String    @default("none")
  billingCycle         String    @default("none")
  autoRenew            Boolean   @default(false)
  price                Float     @default(0)
  currency             String    @default("USD")
  stripeCustomerId     String?
  stripeSubscriptionId String?
  features             Json      // Store features as JSON
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt
  
  // Relations
  user                 User      @relation(fields: [userId], references: [id])
  userId               Int       @unique
  payments             Payment[]
}

model Template {
  id                      Int       @id @default(autoincrement())
  name                    String
  category                String    @default("marketing")
  content                 String    @db.Text
  variables               Json?     // Store variables as JSON
  headerType              String    @default("none")
  headerContent           Json?     // Store headerContent as JSON
  footerText              String?
  callToAction            Json?     // Store callToAction as JSON
  status                  String    @default("draft")
  whatsappApproved        Boolean   @default(false)
  whatsappTemplateId      String?
  whatsappTemplateNamespace String?
  isPublic                Boolean   @default(false)
  language                String    @default("en")
  usageCount              Int       @default(0)
  tags                    Json?     // Store tags as JSON
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now()) @updatedAt
  
  // Relations
  user                    User      @relation(fields: [userId], references: [id])
  userId                  Int
  campaigns               Campaign[]
  messages                Message[]
}

model Ticket {
  id             Int            @id @default(autoincrement())
  title          String
  description    String
  status         String         @default("open")
  priority       String         @default("medium")
  category       String         @default("other")
  attachments    Json?          // Store attachments as JSON
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  closedAt       DateTime?
  resolvedAt     DateTime?
  
  // Relations
  user           User           @relation("TicketOwner", fields: [userId], references: [id])
  userId         Int
  assignedTo     User?          @relation("TicketAssignee", fields: [assignedToId], references: [id])
  assignedToId   Int?
  comments       TicketComment[]
  relatedTickets Ticket[]       @relation("RelatedTickets")
  parentTickets  Ticket[]       @relation("RelatedTickets")
}

model TicketComment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  
  // Relations
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}